import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;

/**
 * Class: The purpose of the MenuHandler class is to respond
 * to the events generated by the menu items.
 */
public class MenuHandler implements ActionListener {

    //---properties

    private HardwareStore hardwareStore;

    //---methods

    public void actionPerformed(ActionEvent event) {

        if (event.getSource() == hardwareStore.geteMI()) {
            /**The Exit menu Item was selected. */
            hardwareStorevent.cleanup();
        } else if (event.getSource() == hardwareStore.getLmMI()) {
            hardwareStore.sysPrint("The Lawn Mower menu Item was selected.\n");

            hardwareStore.display("Lawn Mowers");
        } else if (event.getSource() == hardwareStore.getLmtMI()) {
            hardwareStore.sysPrint("The Lawn Mower Tractor menu Item was selected.\n");

            hardwareStore.display("Lawn Tractor Mowers");
        } else if (event.getSource() == hardwareStore.getHdMI()) {
            hardwareStore.sysPrint("The Hand Drill Tools menu Item was selected.\n");

            hardwareStore.display("Hand Drill Tools");
        } else if (event.getSource() == hardwareStore.getDpMI()) {
            hardwareStore.sysPrint("The Drill Press Power Tools menu Item was selected.\n");

            hardwareStore.display("Drill Press Power Tools");
        } else if (event.getSource() == hardwareStore.getCsMI()) {
            hardwareStore.sysPrint("The Circular Saws Tools menu Item was selected.\n");

            hardwareStore.display("Circular Saws");
        } else if (event.getSource() == hardwareStore.getHamMI()) {
            hardwareStore.sysPrint("The Hammer menu Item was selected.\n");

            hardwareStore.display("Hammers");
        } else if (event.getSource() == hardwareStore.getTabMI()) {
            hardwareStore.sysPrint("The Table Saws menu Item was selected.\n");

            hardwareStore.display("Table Saws");
        } else if (event.getSource() == hardwareStore.getBandMI()) {
            hardwareStore.sysPrint("The Band Saws menu Item was selected.\n");

            hardwareStore.display("Band Saws");
        } else if (event.getSource() == hardwareStore.getSandMI()) {
            hardwareStore.sysPrint("The Sanders menu Item was selected.\n");

            hardwareStore.display("Sanders");
        } else if (event.getSource() == hardwareStore.getStapMI()) {
            hardwareStore.sysPrint("The Staplers menu Item was selected.\n");

            hardwareStore.display("Staplers");
        } else if (event.getSource() == hardwareStore.getWdvMI()) {
            hardwareStore.sysPrint("The Wet-Dry Vacs menu Item was selected.\n");
            // ListRecs BPTRecs = new ListRecs( hws , "WDV", "Wet-Dry Vacs" );
        } else if (event.getSource() == hardwareStore.getSccMI()) {
            hardwareStore.sysPrint("The Storage, Chests & Cabinets menu Item was selected.\n");
            //ListRecs BPTRecs = new ListRecs( hws , "SCC", "Storage, Chests & Cabinets" );
        } else if (event.getSource() == hardwareStore.getDeleteMI()) {
            hardwareStore.sysPrint("The Delete Record Dialog was made visible.\n");
            //DeleteRec( HardwareStore hw_store,  RandomAccessFile f,
            // JTable tab, String p_Data[] []  )
            hardwareStore.setDeleteRec(new Delete.DeleteRec(hardwareStore.getHws(), hardwareStore.getFile(), hardwareStore.getTable(), hardwareStore.getpData()));
            hardwareStore.getDeleteRec().setVisible(true);
        } else if (event.getSource() == hardwareStore.getAddMI()) {
            hardwareStore.sysPrint("The Add menu Item was selected.\n");
            hardwareStore.getpWord().displayDialog("add");
        } else if (event.getSource() == hardwareStore.getUpdateMI()) {
            hardwareStore.sysPrint("The Update menu Item was selected.\n");
            hardwareStore.setUpdate(new Update.UpdateRec(hardwareStore.getHws(), hardwareStore.getFile(), hardwareStore.getpData(), -1));
            hardwareStore.getUpdate().setVisible(true);
        } else if (event.getSource() == hardwareStore.getListAllMI()) {
            hardwareStore.sysPrint("The List All menu Item was selected.\n");
            //listRecs.setVisible( true );
        } else if (event.getSource() == hardwareStore.getDebugON()) {
            hardwareStore.setMyDebug(true);
            hardwareStore.sysPrint("Debugging for this execution is turned on.\n");
        } else if (event.getSource() == hardwareStore.getDebugOFF()) {
            hardwareStore.sysPrint("Debugging for this execution is turned off.\n");
            hardwareStore.setMyDebug(false);
        } else if (event.getSource() == hardwareStore.getHelpHWMI()) {
            hardwareStore.sysPrint("The Help menu Item was selected.\n");
            File hd = new File("HW_Tutorial.html");
           

            Runtime rt = Runtime.getRuntime();
            String[] callAndArgs = {"c:\\Program Files\\Internet Explorer\\IEXPLORE.exe",
                    "" + hd.getAbsolutePath()};

            try {

                Process child = rt.exec(callAndArgs);
                child.waitFor();
                hardwareStore.sysPrint("Process exit code is: " +
                        child.exitValue());
            } catch (IOException e2) {
                hardwareStore.sysPrint(
                        "IOException starting process!");
            } catch (InterruptedException e3) {
                System.err.println(
                        "Interrupted waiting for process!");
            }
        } else if (event.getSource() == hardwareStore.getAboutHWMI()) {
            hardwareStore.sysPrint("The About menu Item was selected.\n");
            Runtime rt = Runtime.getRuntime();
            String[] callAndArgs = {"c:\\Program Files\\Internet Explorer\\IEXPLORE.exe",
                    "http://www.sumtotalz.com/TotalAppsWorks/ProgrammingResource.html"};
            try {
                Process child = rt.exec(callAndArgs);
                child.waitFor();
                hardwareStore.sysPrint("Process exit code is: " +
                        child.exitValue());
            } catch (IOException e2) {
                System.err.println(
                        "IOException starting process!");
            } catch (InterruptedException e3) {
                System.err.println(
                        "Interrupted waiting for process!");
            }
        }
        String current = (String) event.getActionCommand();
    }
}
